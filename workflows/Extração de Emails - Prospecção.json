{"createdAt":"2025-06-20T06:21:55.711Z","updatedAt":"2025-07-03T03:49:26.004Z","id":"NUnliSW56etK5XqH","name":"Extração de Emails - Prospecção","active":false,"isArchived":false,"nodes":[{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[-1520,380],"id":"b1a7c26e-3fcd-49f3-8881-50d54ae68ea7","name":"Iniciar"},{"parameters":{"documentId":{"__rl":true,"value":"1j2CkwYR5SqaNwyO4jGyZUIkjADZ-_0HIkbpgqk_vm4g","mode":"list","cachedResultName":"Scrape N8N do Registro BR","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1j2CkwYR5SqaNwyO4jGyZUIkjADZ-_0HIkbpgqk_vm4g/edit?usp=drivesdk"},"sheetName":{"__rl":true,"value":"gid=0","mode":"list","cachedResultName":"Página1","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1j2CkwYR5SqaNwyO4jGyZUIkjADZ-_0HIkbpgqk_vm4g/edit#gid=0"},"options":{}},"type":"n8n-nodes-base.googleSheets","typeVersion":4.6,"position":[-1360,380],"id":"84578e6a-c262-4b06-961c-3f67a5875923","name":"Get row(s) in sheet","credentials":{"googleSheetsOAuth2Api":{"id":"duX7Zo5QobkZJdKh","name":"Google Sheets allan"}}},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[-1140,380],"id":"569eb80d-2181-4b82-b883-efa430048243","name":"Loop Over Items"},{"parameters":{},"type":"n8n-nodes-base.noOp","name":"Replace Me","typeVersion":1,"position":[-20,360],"id":"637419b6-b225-4bc8-a682-2d7e318e38dd"},{"parameters":{"amount":2},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[-740,280],"id":"2a24ed27-068a-4b0e-83d2-47a8f61b4142","name":"Wait","webhookId":"e2133878-9d92-4651-a034-03ae94ca772e"},{"parameters":{"jsCode":"// Pega o HTML do HTTP Request\nconst httpData = $input.first().json;\nconst html = httpData.body || httpData.data || JSON.stringify(httpData);\nconst siteUrl = httpData.Site || $input.first().json.Site || '';\n\nconsole.log('=== BUSCA AVANÇADA POR EMAIL ===');\nconsole.log('Site:', siteUrl);\nconsole.log('HTML size:', html.length);\n\n// Função super robusta para encontrar emails\nfunction extractEmailsAdvanced(content) {\n  let emails = [];\n  \n  // 1. Decodifica entidades HTML primeiro\n  const decodedContent = content\n    .replace(/&#64;/g, '@')           // &#64; = @\n    .replace(/&amp;/g, '&')          // &amp; = &\n    .replace(/&lt;/g, '<')           // &lt; = \n    .replace(/&gt;/g, '>')           // &gt; = >\n    .replace(/&#x40;/g, '@')         // &#x40; = @\n    .replace(/&#0064;/g, '@')        // &#0064; = @\n    .replace(/&commat;/g, '@')       // &commat; = @\n    .replace(/\\[at\\]/gi, '@')        // [at] = @\n    .replace(/\\(at\\)/gi, '@')        // (at) = @\n    .replace(/\\sat\\s/gi, '@')        // \" at \" = @\n    .replace(/\\[dot\\]/gi, '.')       // [dot] = .\n    .replace(/\\(dot\\)/gi, '.')       // (dot) = .\n    .replace(/\\sdot\\s/gi, '.');      // \" dot \" = .\n  \n  // 2. Patterns mais agressivos\n  const patterns = [\n    // Email normal\n    /([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/g,\n    // Email em atributos\n    /href\\s*=\\s*[\"']mailto:([^\"']+)[\"']/gi,\n    // Email em data attributes\n    /data-email\\s*=\\s*[\"']([^\"']+)[\"']/gi,\n    // Email ofuscado com spans\n    /<span[^>]*>([a-zA-Z0-9._%+-]+)<\\/span>\\s*@\\s*<span[^>]*>([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})<\\/span>/gi,\n    // Email separado por elementos\n    /([a-zA-Z0-9._%+-]+)\\s*<[^>]*>\\s*@\\s*<[^>]*>\\s*([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/gi,\n    // Email com espaços extras\n    /([a-zA-Z0-9._%+-]+)\\s+@\\s+([a-zA-Z0-9.-]+\\s*\\.\\s*[a-zA-Z]{2,})/g,\n    // Email em JavaScript\n    /[\"']([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})[\"']/g,\n    // Email base64 (básico)\n    /btoa\\s*\\(\\s*[\"']([^\"']*@[^\"']*)[\"']\\s*\\)/gi\n  ];\n  \n  // 3. Aplica cada pattern\n  patterns.forEach((pattern, index) => {\n    const matches = decodedContent.match(pattern) || [];\n    console.log(`Pattern ${index + 1}: encontrou ${matches.length} matches`);\n    \n    matches.forEach(match => {\n      // Limpa o match dependendo do pattern\n      let cleanEmail = match;\n      \n      if (match.includes('mailto:')) {\n        cleanEmail = match.replace(/.*mailto:/, '').replace(/[\"']/g, '');\n      } else if (match.includes('data-email')) {\n        cleanEmail = match.replace(/.*data-email\\s*=\\s*[\"']/, '').replace(/[\"'].*/, '');\n      } else if (match.includes('<span')) {\n        // Para emails ofuscados com spans\n        const parts = match.match(/([a-zA-Z0-9._%+-]+)[^a-zA-Z0-9]*@[^a-zA-Z0-9]*([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/);\n        if (parts) cleanEmail = parts[1] + '@' + parts[2];\n      } else if (match.includes('\"') || match.includes(\"'\")) {\n        cleanEmail = match.replace(/['\"]/g, '');\n      }\n      \n      // Remove espaços extras\n      cleanEmail = cleanEmail.replace(/\\s+/g, '');\n      \n      if (cleanEmail.includes('@') && cleanEmail.includes('.')) {\n        emails.push(cleanEmail);\n      }\n    });\n  });\n  \n  // 4. Busca em scripts e dados JSON\n  const scriptMatches = content.match(/<script[^>]*>(.*?)<\\/script>/gs) || [];\n  scriptMatches.forEach(script => {\n    const scriptEmails = script.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g) || [];\n    emails = emails.concat(scriptEmails);\n  });\n  \n  // 5. Busca em comentários HTML\n  const commentMatches = content.match(/<!--(.*?)-->/gs) || [];\n  commentMatches.forEach(comment => {\n    const commentEmails = comment.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g) || [];\n    emails = emails.concat(commentEmails);\n  });\n  \n  // 6. Filtra e limpa emails finais\n  const validEmails = [...new Set(emails)]\n    .map(email => email.toLowerCase().trim())\n    .filter(email => {\n      return email.includes('@') && \n             email.includes('.') &&\n             !email.includes('noreply') &&\n             !email.includes('no-reply') &&\n             !email.includes('example') &&\n             !email.includes('test') &&\n             !email.includes('domain.com') &&\n             !email.includes('email.com') &&\n             !email.includes(' ') &&\n             email.length > 5 &&\n             email.length < 100 &&\n             /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/.test(email);\n    });\n  \n  console.log('Emails válidos encontrados:', validEmails);\n  return validEmails;\n}\n\n// Executa a busca\nconst foundEmails = extractEmailsAdvanced(html);\n\n// Se não encontrou, tenta buscar padrões específicos do site\nif (foundEmails.length === 0) {\n  console.log('Tentando padrões específicos...');\n  \n  // Busca por WhatsApp que pode ter email associado\n  const whatsappPattern = /whatsapp.*?([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/gi;\n  const whatsappEmails = html.match(whatsappPattern) || [];\n  \n  // Busca por \"contato\" próximo a emails\n  const contactPattern = /contato.*?([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/gi;\n  const contactEmails = html.match(contactPattern) || [];\n  \n  foundEmails.push(...whatsappEmails, ...contactEmails);\n}\n\nreturn {\n  json: {\n    email: foundEmails.length > 0 ? foundEmails[0] : 'Email não encontrado',\n    range: `B${$runIndex + 2}`,\n    site: siteUrl,\n    allEmails: foundEmails,\n    totalFound: foundEmails.length,\n    debug: {\n      htmlSize: html.length,\n      hasAt: html.includes('@'),\n      hasMailto: html.includes('mailto'),\n      hasContact: html.toLowerCase().includes('contato')\n    }\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-560,280],"id":"c50ce4dd-5cc4-4f7f-bf62-4c4db047f49d","name":"Code"},{"parameters":{"url":"=https://{{ $json.Sites }}","options":{"timeout":3000}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-920,280],"id":"37f4ace0-633a-4106-bebb-6bf252ec7b10","name":"HTTP Request1","onError":"continueRegularOutput"},{"parameters":{"operation":"appendOrUpdate","documentId":{"__rl":true,"value":"1j2CkwYR5SqaNwyO4jGyZUIkjADZ-_0HIkbpgqk_vm4g","mode":"list","cachedResultName":"Scrape N8N do Registro BR","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1j2CkwYR5SqaNwyO4jGyZUIkjADZ-_0HIkbpgqk_vm4g/edit?usp=drivesdk"},"sheetName":{"__rl":true,"value":"gid=0","mode":"list","cachedResultName":"Página1","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1j2CkwYR5SqaNwyO4jGyZUIkjADZ-_0HIkbpgqk_vm4g/edit#gid=0"},"columns":{"mappingMode":"defineBelow","value":{"Emails":"={{ $json.email }}","Sites":"={{ $('Get row(s) in sheet').item.json.Sites }}"},"matchingColumns":["Sites"],"schema":[{"id":"Sites","displayName":"Sites","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"Emails","displayName":"Emails","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.googleSheets","typeVersion":4.6,"position":[-380,280],"id":"644f5299-62b4-46ff-9f2b-6ca25c38ee3d","name":"Append or update row in sheet","credentials":{"googleSheetsOAuth2Api":{"id":"duX7Zo5QobkZJdKh","name":"Google Sheets allan"}}},{"parameters":{"amount":3},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[-200,280],"id":"1793ab39-d75e-452b-bda5-c8af7ae21a58","name":"Wait1","webhookId":"9a0f1b2c-7d3a-4635-bd6e-188a601e1b06"}],"connections":{"Iniciar":{"main":[[{"node":"Get row(s) in sheet","type":"main","index":0}]]},"Get row(s) in sheet":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Loop Over Items":{"main":[[],[{"node":"HTTP Request1","type":"main","index":0}]]},"Replace Me":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Wait":{"main":[[{"node":"Code","type":"main","index":0}]]},"HTTP Request1":{"main":[[{"node":"Wait","type":"main","index":0}]]},"Code":{"main":[[{"node":"Append or update row in sheet","type":"main","index":0}]]},"Append or update row in sheet":{"main":[[{"node":"Wait1","type":"main","index":0}]]},"Wait1":{"main":[[{"node":"Replace Me","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"cbd35ee0-131d-4651-a865-b5ac3c990216","triggerCount":0,"tags":[]}