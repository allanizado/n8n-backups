{"createdAt":"2025-06-22T05:01:34.383Z","updatedAt":"2025-06-25T21:19:49.662Z","id":"Q5XlHJdmHBqbfmZ2","name":"WebScrapping","active":false,"isArchived":false,"nodes":[{"parameters":{"options":{}},"type":"@n8n/n8n-nodes-langchain.chatTrigger","typeVersion":1.1,"position":[-4220,-280],"id":"f328052e-4a74-47cb-94dc-5bd5db9b7399","name":"When chat message received","webhookId":"[REDACTED]"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"id":"aa9156b4-7556-4229-938b-38e0d9391015","leftValue":"={{ $json.data }}","rightValue":"sitemap","operator":{"type":"string","operation":"contains"}}],"combinator":"and"},"looseTypeValidation":true,"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-3420,-280],"id":"3bc05ddb-ce02-4234-bd31-03559c0ee52d","name":"If sitemap exists"},{"parameters":{"url":"={{ $json.message.content.baseUrl }}/robots.txt","sendHeaders":true,"headerParameters":{"parameters":[{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-3640,-280],"id":"21fffa62-a2cb-4e16-a281-4b3e22a41a75","name":"Check robots","onError":"continueErrorOutput"},{"parameters":{"content":"## robots.txt\n\nSites usam o arquivo robots para dizer ao Google o que pode e o que não pode ser raspado (scrapeado).\"\n\n\"A maioria das empresas usam isso.","height":400},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-3720,-500],"id":"82e3352b-362e-4f1c-991b-dedb39466813","name":"Sticky Note"},{"parameters":{"content":"## sitemap.xml\n\nÉ isso que queremos. Isso nos dá um diretório do site.","height":400},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-3460,-500],"id":"de6c08f9-9bc8-433e-9ed6-4a33847b7067","name":"Sticky Note1"},{"parameters":{"url":"={{ $json.message.content.sitemap }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-2600,-400],"id":"f7a3beb4-0ae5-446b-b6eb-e1bd735d3074","name":"HTTP Request"},{"parameters":{"modelId":{"__rl":true,"value":"gpt-4o-mini","mode":"list","cachedResultName":"GPT-4O-MINI"},"messages":{"values":[{"content":"output the sitemap value in json format of this structure:\n\n{\"sitemap\":\"www.example.com/sitemap.xml:}\n\nNote, only output one single sitemap value. If there are multiple, make the best choice on which is the correct one to use","role":"system"},{"content":"={{ $json.data }}"}]},"jsonOutput":true,"options":{}},"type":"@n8n/n8n-nodes-langchain.openAi","typeVersion":1.8,"position":[-2960,-400],"id":"80c20a28-c64c-4f02-bb1d-1eea472c3c8a","name":"OpenAI","credentials":{"openAiApi":{"id":"rVdjfDowKjs3OG2m","name":"OpenAi - TECHPULSE"}}},{"parameters":{"modelId":{"__rl":true,"value":"gpt-4o-mini","mode":"list","cachedResultName":"GPT-4O-MINI"},"messages":{"values":[{"content":"Extraia cada um dos elementos <loc> separadamente e retorne um objeto JSON como o mostrado abaixo, certificando-se de que o primeiro par chave-valor identifique se os caminhos são URLs normais ou arquivos XML:\n\n{\n\"pathway\": \"xml\"\n\"loc1\":\"example1.com.xml\",\n\"loc2\":\"example2.com.xml\",\n\"loc3\":\"example3.com.xml\"\n}\n\nor\n\n\n{\n\"pathway\": \"url\"\n\"loc1\":\"example1.com\",\n\"loc2\":\"example2.com\",\n\"loc3\":\"example3.com\"\n}\n","role":"system"},{"content":"={{ $json.data }}"}]},"jsonOutput":true,"options":{}},"type":"@n8n/n8n-nodes-langchain.openAi","typeVersion":1.8,"position":[-1880,-100],"id":"34031534-8462-44a7-80d8-ec941ba2cce9","name":"OpenAI1","credentials":{"openAiApi":{"id":"rVdjfDowKjs3OG2m","name":"OpenAi - TECHPULSE"}}},{"parameters":{"jsCode":"const content = $input.first().json.message.content;\n\n// Extract all `loc1`, `loc2`, etc., into an array\nconst urls = Object.values(content);\n\n// Return each URL as a separate item\nreturn urls.map(url => ({\n  json: { url }\n}));"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-1280,20],"id":"618d208a-80c3-49fd-9977-068451380582","name":"Code"},{"parameters":{"options":{}},"type":"n8n-nodes-base.xml","typeVersion":1,"position":[-860,20],"id":"77eb5644-b850-41df-80a4-2c256a76542c","name":"XML","onError":"continueRegularOutput"},{"parameters":{"modelId":{"__rl":true,"value":"gpt-4o-mini","mode":"list","cachedResultName":"GPT-4O-MINI"},"messages":{"values":[{"content":"You are a URL normalization assistant. Your task is to convert any input URL into its **standard base URL format** and return the result as JSON.\n\nNormalization Rules:\n1. Ensure the URL starts with `https://` (add it if missing).\n2. Remove `www.` unless it is critical for the domain's identity.\n3. Remove everything after the domain (paths, query strings, fragments).\n4. Preserve subdomains (e.g., `blog.example.com` → `https://blog.example.com`).\n5. Convert the domain part to lowercase.\n6. Output the result in JSON format as:\n   {\n     \"baseUrl\": \"https://example.com\"\n   }\n\nExamples:\nInput: `n8n.io/path/page`\nOutput: `{ \"baseUrl\": \"https://n8n.io\" }`\n\nInput: `http://www.Example.COM/query=1`\nOutput: `{ \"baseUrl\": \"https://example.com\" }`\n\nReturn **only the JSON object** in the output. No additional text or explanations.\n","role":"system"},{"content":"={{ $json.chatInput }}"}]},"jsonOutput":true,"options":{}},"type":"@n8n/n8n-nodes-langchain.openAi","typeVersion":1.8,"position":[-4000,-280],"id":"0b8f6133-dd37-48b7-a5a6-6ab3a9e8bd62","name":"OpenAI2","credentials":{"openAiApi":{"id":"rVdjfDowKjs3OG2m","name":"OpenAi - TECHPULSE"}}},{"parameters":{"content":"## Xml check\n\nAlguns sites têm duas ou mais páginas sitemap/xml, pois possuem categorias. Sites mais simples geralmente têm apenas um arquivo XML.","height":400},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-1580,-320],"id":"b99a192b-2d6e-44b0-98a1-728012f65fce","name":"Sticky Note2"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"id":"b9a4d5b0-2385-49cd-9228-df1c56284cf1","leftValue":"={{ $json.message.content.pathway }}","rightValue":"url","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"looseTypeValidation":true,"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-1520,-100],"id":"30b4ca9a-afaa-4c73-9b05-6467078a3477","name":"If"},{"parameters":{"jsCode":"const data = $('OpenAI1').first().json.message;\n\nconst content = data.content;\n\nconst urls = [];\n\nObject.keys(content).forEach(key => {\n  if (key.startsWith('loc')) {\n    urls.push({ json: { url: content[key] } });\n  }\n});\n\nreturn urls;\n\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-1280,-180],"id":"aecc170f-2f03-4ed2-9eb8-d9679d09d7b9","name":"Code2"},{"parameters":{"html":"={{ $json.data }}","options":{}},"type":"n8n-nodes-base.markdown","typeVersion":1,"position":[-860,-180],"id":"afb2f6b6-b14f-4952-8739-388af123f576","name":"Markdown"},{"parameters":{"html":"={{ $json.data }}","options":{}},"type":"n8n-nodes-base.markdown","typeVersion":1,"position":[-220,20],"id":"d1295d2b-aa9c-480e-8756-cae436a16cd3","name":"Markdown1","onError":"continueRegularOutput"},{"parameters":{"url":"={{ $('OpenAI2').item.json.message.content.baseUrl }}/sitemap.xml","sendHeaders":true,"headerParameters":{"parameters":[{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-2940,-200],"id":"85efefd3-c9c4-4431-8a83-8d6396bb8af6","name":"HTTP Request4","onError":"continueErrorOutput"},{"parameters":{"url":"={{ $('OpenAI2').item.json.message.content.baseUrl }}/site-map.xml","sendHeaders":true,"headerParameters":{"parameters":[{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-2940,100],"id":"e912f671-89aa-46f9-a0ca-2af3b9ef596c","name":"HTTP Request5","executeOnce":false,"onError":"continueErrorOutput"},{"parameters":{"url":"={{ $('OpenAI2').item.json.message.content.baseUrl }}/sitemap_index.xml","sendHeaders":true,"headerParameters":{"parameters":[{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-2940,-60],"id":"66c6f4c2-8dff-4697-80c8-ce2025b6e977","name":"HTTP Request6","alwaysOutputData":false,"onError":"continueErrorOutput"},{"parameters":{"url":"={{ $('OpenAI2').item.json.message.content.baseUrl }}/sitemap.json","sendHeaders":true,"headerParameters":{"parameters":[{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-2940,240],"id":"29fa71f9-1473-4f78-a5b7-c72e7fb1dc43","name":"HTTP Request7","onError":"continueErrorOutput"},{"parameters":{},"type":"n8n-nodes-base.merge","typeVersion":3,"position":[-2180,-100],"id":"6085751a-3707-4317-8430-78b128c0f4fb","name":"Merge"},{"parameters":{"jsCode":"// Get all input items\nconst items = $input.all();\n\n// Function to convert markdown to plain text\nfunction convertMarkdownToPlainText(markdown) {\n  // Ensure we're working with a string\n  let plainText = String(markdown);\n  \n  // Remove links: [text](URL)\n  plainText = plainText.replace(/\\[([^\\]]+)\\]\\([^\\)]+\\)/g, '$1');\n  \n  // Remove images: ![alt text](URL)\n  plainText = plainText.replace(/!\\[([^\\]]*)\\]\\([^\\)]+\\)/g, '$1');\n  \n  // Remove headers: # Header\n  plainText = plainText.replace(/(#+)\\s*(.*)/g, '$2');\n  \n  // Remove bold and italic formatting\n  plainText = plainText.replace(/\\*\\*|\\*|__|_/g, '');\n  \n  // Remove HTML special characters\n  plainText = plainText.replace(/([<>])/g, '');\n  \n  // Remove extra line breaks\n  plainText = plainText.replace(/\\n\\s*\\n/g, '\\n');\n  \n  // Remove bullet points or numbered list formatting\n  plainText = plainText.replace(/^\\s*[-*+]\\s+/gm, '');\n  \n  return plainText.trim();\n}\n\n// Process all items and combine them with page numbers and clear formatting\nconst combinedContent = items.map((item, index) => {\n  let content;\n  if (typeof item === 'object' && item !== null) {\n    content = item.data || item.content || item.text || JSON.stringify(item);\n  } else {\n    content = String(item);\n  }\n  \n  const pageNumber = index + 1;\n  const processedContent = convertMarkdownToPlainText(content);\n  \n  return `Page ${pageNumber}\\n──────────────────\\n\\n${processedContent}\\n\\n\\n`;\n}).join('\\n\\n'); // Double line breaks between pages\n\n// Return with both raw content and formatted content\nreturn [{\n  json: {\n    content: combinedContent,\n    rawContent: items.map((item, index) => ({\n      pageNumber: index + 1,\n      content: convertMarkdownToPlainText(String(item.data || item.content || item.text || item))\n    }))\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-640,-180],"id":"b4e230d2-1d19-4f67-8165-78e36cc0e090","name":"Strip"},{"parameters":{"jsCode":"function extractAllLocs(data) {\n    const locs = [];\n\n    function findLocs(obj) {\n        if (!obj) return;\n\n        // If it's an object, check for loc key and continue recursion\n        if (typeof obj === 'object') {\n            for (const key in obj) {\n                if (key === 'loc' && typeof obj[key] === 'string') {\n                    locs.push(obj[key]);\n                } else {\n                    findLocs(obj[key]);\n                }\n            }\n        }\n        // If it's an array, loop through each item\n        else if (Array.isArray(obj)) {\n            obj.forEach(findLocs);\n        }\n    }\n\n    findLocs(data);\n    return locs.map(url => ({ url }));\n}\n\n// Usage in n8n:\nconst data = $input.first().json.urlset; // Extracting from the urlset\n\nconst urls = extractAllLocs(data);\n\nreturn urls.map(item => ({ json: item }));\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-640,20],"id":"303ec6fd-7676-4591-a379-2e79ffe8dff1","name":"find URLs"},{"parameters":{"url":"={{ $json.url }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"}]},"options":{"batching":{"batch":{"batchSize":1}},"allowUnauthorizedCerts":false,"response":{"response":{"responseFormat":"text"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-420,20],"id":"68542fd4-a828-448f-b1ff-0b6d809e318f","name":"GET URLs"},{"parameters":{"jsCode":"// Get all input items\nconst items = $input.all();\n\n// Function to convert markdown to plain text\nfunction convertMarkdownToPlainText(markdown) {\n  // Ensure we're working with a string\n  let plainText = String(markdown);\n  \n  // Remove links: [text](URL)\n  plainText = plainText.replace(/\\[([^\\]]+)\\]\\([^\\)]+\\)/g, '$1');\n  \n  // Remove images: ![alt text](URL)\n  plainText = plainText.replace(/!\\[([^\\]]*)\\]\\([^\\)]+\\)/g, '$1');\n  \n  // Remove headers: # Header\n  plainText = plainText.replace(/(#+)\\s*(.*)/g, '$2');\n  \n  // Remove bold and italic formatting\n  plainText = plainText.replace(/\\*\\*|\\*|__|_/g, '');\n  \n  // Remove HTML special characters\n  plainText = plainText.replace(/([<>])/g, '');\n  \n  // Remove extra line breaks\n  plainText = plainText.replace(/\\n\\s*\\n/g, '\\n');\n  \n  // Remove bullet points or numbered list formatting\n  plainText = plainText.replace(/^\\s*[-*+]\\s+/gm, '');\n  \n  return plainText.trim();\n}\n\n// Process all items and combine them with page numbers and clear formatting\nconst combinedContent = items.map((item, index) => {\n  let content;\n  if (typeof item === 'object' && item !== null) {\n    content = item.data || item.content || item.text || JSON.stringify(item);\n  } else {\n    content = String(item);\n  }\n  \n  const pageNumber = index + 1;\n  const processedContent = convertMarkdownToPlainText(content);\n  \n  return `Page ${pageNumber}\\n──────────────────\\n\\n${processedContent}\\n\\n\\n`;\n}).join('\\n\\n'); // Double line breaks between pages\n\n// Return with both raw content and formatted content\nreturn [{\n  json: {\n    content: combinedContent,\n    rawContent: items.map((item, index) => ({\n      pageNumber: index + 1,\n      content: convertMarkdownToPlainText(String(item.data || item.content || item.text || item))\n    }))\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[0,20],"id":"08792808-6ad9-4760-a49c-bc20b686fa8c","name":"Strip1"},{"parameters":{"url":"={{ $json.url }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-1080,20],"id":"4a9d945c-3957-4a83-a151-98857d079d5a","name":"GET XML","onError":"continueRegularOutput"},{"parameters":{"url":"={{ $json.url }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"}]},"options":{"batching":{"batch":{"batchSize":1}},"allowUnauthorizedCerts":false,"response":{"response":{"responseFormat":"text"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-1080,-180],"id":"557dc4ff-1079-46fd-92bc-68b3bef27b80","name":"GET URLs1","onError":"continueRegularOutput"},{"parameters":{"operation":"append","documentId":{"__rl":true,"value":"1_qg_CKP4kbamVcvheKwghrEsXSLm4SfZGo_g6XrbhWc","mode":"list","cachedResultName":"Scraper","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1_qg_CKP4kbamVcvheKwghrEsXSLm4SfZGo_g6XrbhWc/edit?usp=drivesdk"},"sheetName":{"__rl":true,"value":"gid=0","mode":"list","cachedResultName":"Página1","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1_qg_CKP4kbamVcvheKwghrEsXSLm4SfZGo_g6XrbhWc/edit#gid=0"},"columns":{"mappingMode":"defineBelow","value":{"Sitemap":"={{ $('OpenAI').all()[0].json.message.content.sitemap }}","XML":"=","List of URLs":"={{ $('Code2').all().map(item => item.json.url).join('\\n') }}","Website URL":"={{ $('OpenAI').first().json.message.content.sitemap }}","Contents":"={{ $json.content }}"},"matchingColumns":["id"],"schema":[{"id":"Website URL","displayName":"Website URL","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"Sitemap","displayName":"Sitemap","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"XML","displayName":"XML","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"List of URLs","displayName":"List of URLs","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"Contents","displayName":"Contents","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.googleSheets","typeVersion":4.5,"position":[-420,-180],"id":"d0a35771-c583-4d4d-b552-5ae4949aa8a1","name":"Google Sheets","credentials":{"googleSheetsOAuth2Api":{"id":"duX7Zo5QobkZJdKh","name":"Google Sheets allan"}}},{"parameters":{"operation":"append","documentId":{"__rl":true,"value":"1ur1I3f-akzOY1tU6aJkCx1u0SGz-TlT50LSDxSkm0-U","mode":"list","cachedResultName":"Scraper","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1ur1I3f-akzOY1tU6aJkCx1u0SGz-TlT50LSDxSkm0-U/edit?usp=drivesdk"},"sheetName":{"__rl":true,"value":"gid=0","mode":"list","cachedResultName":"Página1","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1ur1I3f-akzOY1tU6aJkCx1u0SGz-TlT50LSDxSkm0-U/edit#gid=0"},"columns":{"mappingMode":"defineBelow","value":{"Sitemap":"={{ $('OpenAI').all()[0].json.message.content.sitemap }}","XML":"={{ $('Code').all().map(item => item.json.url).join('\\n') }}","List of URLs":"={{ $('find URLs').all().map(item => item.json.url).join('\\n') }}\n","Website URL":"={{ $('OpenAI2').first().json.message.content.baseUrl }}","Contents":"={{ $json.content }}"},"matchingColumns":["id"],"schema":[{"id":"Website URL","displayName":"Website URL","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"Sitemap","displayName":"Sitemap","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"XML","displayName":"XML","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"List of URLs","displayName":"List of URLs","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"Contents","displayName":"Contents","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.googleSheets","typeVersion":4.5,"position":[200,20],"id":"3c54f350-3374-4912-b8aa-2d2cc878b1ab","name":"Google Sheets2","credentials":{"googleSheetsOAuth2Api":{"id":"duX7Zo5QobkZJdKh","name":"Google Sheets allan"}}}],"connections":{"When chat message received":{"main":[[{"node":"OpenAI2","type":"main","index":0}]]},"Check robots":{"main":[[{"node":"If sitemap exists","type":"main","index":0}],[{"node":"If sitemap exists","type":"main","index":0}]]},"If sitemap exists":{"main":[[{"node":"OpenAI","type":"main","index":0}],[{"node":"HTTP Request4","type":"main","index":0},{"node":"HTTP Request6","type":"main","index":0},{"node":"HTTP Request5","type":"main","index":0},{"node":"HTTP Request7","type":"main","index":0}]]},"HTTP Request":{"main":[[{"node":"Merge","type":"main","index":0}]]},"OpenAI":{"main":[[{"node":"HTTP Request","type":"main","index":0}]]},"OpenAI1":{"main":[[{"node":"If","type":"main","index":0}]]},"Code":{"main":[[{"node":"GET XML","type":"main","index":0}]]},"XML":{"main":[[{"node":"find URLs","type":"main","index":0}]]},"OpenAI2":{"main":[[{"node":"Check robots","type":"main","index":0}]]},"If":{"main":[[{"node":"Code2","type":"main","index":0}],[{"node":"Code","type":"main","index":0}]]},"Code2":{"main":[[{"node":"GET URLs1","type":"main","index":0}]]},"Markdown":{"main":[[{"node":"Strip","type":"main","index":0}]]},"Markdown1":{"main":[[{"node":"Strip1","type":"main","index":0}]]},"HTTP Request4":{"main":[[{"node":"Merge","type":"main","index":1}]]},"HTTP Request6":{"main":[[{"node":"Merge","type":"main","index":1}]]},"HTTP Request5":{"main":[[{"node":"Merge","type":"main","index":1}]]},"HTTP Request7":{"main":[[{"node":"Merge","type":"main","index":1}]]},"Merge":{"main":[[{"node":"OpenAI1","type":"main","index":0}]]},"Strip":{"main":[[{"node":"Google Sheets","type":"main","index":0}]]},"find URLs":{"main":[[{"node":"GET URLs","type":"main","index":0}]]},"GET URLs":{"main":[[{"node":"Markdown1","type":"main","index":0}]]},"Strip1":{"main":[[{"node":"Google Sheets2","type":"main","index":0}]]},"GET XML":{"main":[[{"node":"XML","type":"main","index":0}]]},"GET URLs1":{"main":[[{"node":"Markdown","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"2bb6d2b2-98ba-49de-a16d-596b1097f8c0","triggerCount":0,"tags":[{"createdAt":"2025-06-24T01:00:14.818Z","updatedAt":"2025-06-24T01:00:14.818Z","id":"hGHfFkHIsxdmIHMD","name":"raspagem"},{"createdAt":"2025-06-24T01:00:14.832Z","updatedAt":"2025-06-24T01:00:14.832Z","id":"MuG7rvnGurBecrtc","name":"webscraping"}]}